name: Stage Deployment

on:
  push:
    branches:
    - stage

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: themacroeconomicdao/decentralized-social-platform/dsp-stage

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥ –¥–ª—è stage
      - name: Set image tag
        id: vars
        run: echo "TAG=stage-${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Verify image tag exists
        run: |
          sudo apt-get update && sudo apt-get install -y skopeo
          skopeo inspect docker://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.TAG }} >/dev/null

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy to k3s
        run: |
          # Create or update OpenAI secret
          kubectl create secret generic openai-secret \
            --from-literal=api-key="${{ secrets.OPENAI_API_KEY }}" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply manifests via Kustomize overlay
          kubectl apply -k k8s/overlays/stage/

          # Update image in deployment to the specific new sha
          kubectl set image deployment/dsp-stage-deployment dsp-stage=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.TAG }} -n default
          
          # Wait for rollout
          kubectl rollout status deployment/dsp-stage-deployment -n default --timeout=300s

      - name: Get deployment status
        run: |
          echo "üöÄ Deployment Status:"
          kubectl get pods -l app=dsp-stage,environment=stage -n default
          kubectl get service dsp-stage-service -n default
          kubectl get ingress dsp-stage-ingress -n default
          echo "‚úÖ Deployment completed!"
          echo "üåê Application available at: https://stage.dsp.build.infra.gyber.org"

      # -------------------------------------------------
      # Telegram notifications
      # -------------------------------------------------
      - name: Notify Telegram success
        if: success()
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TG_CHAT: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" \
            -d text="‚úÖ STAGE deploy succeeded: $GITHUB_SHA by $GITHUB_ACTOR"

      - name: Notify Telegram failure
        if: failure()
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TG_CHAT: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" \
            -d text="‚ùå STAGE deploy FAILED: $GITHUB_SHA. Check Actions logs."

      # -------------------------------------------------
      # Security scanning ‚Äî –ø–æ–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–æ, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      # -------------------------------------------------
      # - name: Trivy scan
      #   uses: aquasecurity/trivy-action@v0.19.0
      #   with:
      #     image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.TAG }}
      #     format: table
      #     exit-code: 0

      # - name: Grype scan
      #   uses: anchore/scan-action@v3
      #   with:
      #     image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.TAG }}
      #     fail-build: false 