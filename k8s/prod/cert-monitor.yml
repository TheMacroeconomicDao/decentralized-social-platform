apiVersion: batch/v1
kind: CronJob
metadata:
  name: cert-monitor
  namespace: default
  labels:
    app: dsp-prod
    component: cert-monitor
    environment: production
spec:
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 UTC
  schedule: "0 9 * * *"
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: dsp-prod
            component: cert-monitor
        spec:
          restartPolicy: OnFailure
          serviceAccountName: cert-monitor
          containers:
          - name: cert-checker
            image: bitnami/kubectl:latest
            command:
            - /bin/bash
            - -c
            - |
              echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
              kubectl get certificates -A -o custom-columns="NAMESPACE:.metadata.namespace,NAME:.metadata.name,READY:.status.conditions[?(@.type=='Ready')].status,EXPIRES:.status.notAfter" | tee /tmp/certs.txt
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π
              echo ""
              echo "‚ö†Ô∏è  –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π:"
              
              # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π
              THIRTY_DAYS_LATER=$(date -d "+30 days" +%Y-%m-%d)
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
              kubectl get certificates -A -o json | jq -r '.items[] | select(.status.notAfter != null) | "\(.metadata.namespace)/\(.metadata.name) expires \(.status.notAfter)"' | while read line; do
                CERT_NAME=$(echo $line | cut -d' ' -f1)
                EXPIRE_DATE=$(echo $line | cut -d' ' -f3 | cut -dT -f1)
                
                if [[ "$EXPIRE_DATE" < "$THIRTY_DAYS_LATER" ]]; then
                  echo "üö® $CERT_NAME –∏—Å—Ç–µ–∫–∞–µ—Ç $EXPIRE_DATE"
                fi
              done
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–≥–æ—Ç–æ–≤—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
              echo ""
              echo "‚ùå –ù–µ–≥–æ—Ç–æ–≤—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:"
              kubectl get certificates -A -o json | jq -r '.items[] | select(.status.conditions[]?.status != "True") | "\(.metadata.namespace)/\(.metadata.name) - \(.status.conditions[]?.message // "Unknown error")"'
              
              echo ""
              echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            resources:
              requests:
                memory: "64Mi"
                cpu: "50m"
              limits:
                memory: "128Mi"
                cpu: "100m"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cert-monitor
  namespace: default
  labels:
    app: dsp-prod
    component: cert-monitor
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cert-monitor
  labels:
    app: dsp-prod
    component: cert-monitor
rules:
- apiGroups: ["cert-manager.io"]
  resources: ["certificates", "certificaterequests", "issuers", "clusterissuers"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cert-monitor
  labels:
    app: dsp-prod
    component: cert-monitor
subjects:
- kind: ServiceAccount
  name: cert-monitor
  namespace: default
roleRef:
  kind: ClusterRole
  name: cert-monitor
  apiGroup: rbac.authorization.k8s.io 