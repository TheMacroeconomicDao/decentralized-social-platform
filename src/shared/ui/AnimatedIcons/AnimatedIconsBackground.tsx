"use client";

import { useEffect, useState, useCallback, useRef } from "react";
import { AnimatedIcon } from "./AnimatedIcon";
import cls from "./AnimatedIcons.module.scss";

export interface AnimatedIconsBackgroundProps {
    icons?: string[];
    density?: number;
    className?: string;
}

interface IconInstance {
    id: string;
    icon: string;
    size: "small" | "medium" | "large";
    duration: number;
    delay: number;
    startX: number; // —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è X
    endX: number;   // –∫–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è X
    y: number; // –ø–æ–∑–∏—Ü–∏—è Y
}

export const AnimatedIconsBackground = ({
    icons = [
        // –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        "bitcoin", "ethereum", "cardano", "solana", "polygon", 
        "chainlink", "polkadot", "litecoin",
        // –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        "react", "nodejs", "nextjs", "python"
    ],
    density = 1,
    className = "",
}: AnimatedIconsBackgroundProps) => {
    const [activeIcons, setActiveIcons] = useState<IconInstance[]>([]);
    const [isMounted, setIsMounted] = useState(false);
    const intervalRef = useRef<NodeJS.Timeout | null>(null);
    const counterRef = useRef(0);

    console.log("üî• AnimatedIconsBackground rendered, isMounted:", isMounted, "activeIcons:", activeIcons.length);

    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–≥–æ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    useEffect(() => {
        console.log("üöÄ AnimatedIconsBackground mounting...");
        setIsMounted(true);
        return () => {
            if (intervalRef.current) {
                clearInterval(intervalRef.current);
            }
        };
    }, []);

    useEffect(() => {
        if (!isMounted) return;

        console.log("‚ö° Starting icon generation...");

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (intervalRef.current) {
            clearInterval(intervalRef.current);
        }

        // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏ - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
        const createIcon = (): IconInstance => {
            const randomIcon = icons[Math.floor(Math.random() * icons.length)];
            const randomSize = ["small", "medium", "large"][Math.floor(Math.random() * 3)] as "small" | "medium" | "large";
            const randomDuration = 15 + Math.random() * 15;
            
            const startX = Math.random() * 80 + 10; // 10-90%
            const endX = Math.max(5, Math.min(95, startX + (Math.random() - 0.5) * 30));
            
            const newIcon = {
                id: `icon-${counterRef.current++}`,
                icon: randomIcon,
                size: randomSize,
                duration: randomDuration,
                delay: 0,
                startX,
                endX,
                y: Math.random() * 80 + 10,
            };

            console.log("‚ú® Created new icon:", newIcon);
            return newIcon;
        };

        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –∏–∫–æ–Ω–∫—É –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        const timeoutId = setTimeout(() => {
            const firstIcon = createIcon();
            setActiveIcons([firstIcon]);

            // –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∏–∫–æ–Ω–æ–∫
            intervalRef.current = setInterval(() => {
                const newIcon = createIcon();
                setActiveIcons(prev => [...prev, newIcon]);
            }, 3000);
        }, 100);

        return () => {
            clearTimeout(timeoutId);
            if (intervalRef.current) {
                clearInterval(intervalRef.current);
            }
        };
    }, [isMounted, icons]);

    // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏
    const removeIcon = useCallback((iconId: string) => {
        console.log("üóëÔ∏è Removing icon:", iconId);
        setActiveIcons(prev => prev.filter(icon => icon.id !== iconId));
    }, []);

    console.log("üì± Rendering container with", activeIcons.length, "icons");

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º suppressHydrationWarning –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    return (
        <div 
            className={`${cls.container} ${className}`}
            suppressHydrationWarning={true}
        >
            {isMounted && activeIcons.map((iconInstance) => (
                <AnimatedIcon
                    key={iconInstance.id}
                    icon={iconInstance.icon}
                    size={iconInstance.size}
                    duration={iconInstance.duration}
                    delay={iconInstance.delay}
                    startX={iconInstance.startX}
                    endX={iconInstance.endX}
                    onComplete={() => removeIcon(iconInstance.id)}
                />
            ))}
        </div>
    );
};