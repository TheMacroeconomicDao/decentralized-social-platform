import { useEffect, useState, useCallback, useRef } from "react";
import { ANIMATION_CONFIG, ANIMATION_CONFIG_MOBILE } from './constants';
import { getRandomIcon, getRandomSize, getRandomDuration, getRandomPosition } from './utils';
import { useIsMobile, useReducedMotion } from '@/shared/hooks/mediaQuery/useMediaQuery';

export interface IconInstance {
    id: string;
    icon: string;
    size: "small" | "medium" | "large";
    duration: number;
    delay: number;
    startX: number;
    endX: number;
    y: number;
}

export const useAnimatedIcons = (icons: readonly string[]) => {
    const [activeIcons, setActiveIcons] = useState<IconInstance[]>([]);
    const intervalRef = useRef<NodeJS.Timeout | null>(null);
    const counterRef = useRef(0);
    
    const isMobile = useIsMobile();
    const isReducedMotion = useReducedMotion();
    
    // DEBUG: –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    console.log('üîç useAnimatedIcons Debug:', { 
        isMobile, 
        isReducedMotion, 
        iconsLength: icons.length,
        activeIconsLength: activeIcons.length 
    });

    const createIcon = useCallback((): IconInstance => {
        const config = isMobile ? ANIMATION_CONFIG_MOBILE : ANIMATION_CONFIG;
        const randomIcon = getRandomIcon(icons);
        const randomSize = getRandomSize();
        const randomDuration = getRandomDuration(config.minDuration, config.maxDuration);
        const { startX, endX } = getRandomPosition(
            config.minStartX, 
            config.maxStartX, 
            config.maxDrift
        );
        
        const newIcon: IconInstance = {
            id: `icon-${counterRef.current++}`,
            icon: randomIcon,
            size: randomSize,
            duration: randomDuration,
            delay: 0,
            startX,
            endX,
            y: Math.random() * 80 + 10,
        };

        console.log("‚ú® Created icon:", newIcon.icon, isMobile ? "(mobile)" : "(desktop)");
        return newIcon;
    }, [icons, isMobile]);

    const removeIcon = useCallback((iconId: string) => {
        console.log("üóëÔ∏è Removing icon:", iconId);
        setActiveIcons(prev => prev.filter(icon => icon.id !== iconId));
    }, []);

    useEffect(() => {
        console.log('üîç useEffect triggered with:', { isReducedMotion, isMobile });
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ prefers-reduced-motion
        if (isReducedMotion) {
            console.log('‚ùå Animation disabled due to reduced motion preference');
            setActiveIcons([]);
            return;
        }

        console.log("üöÄ Starting animation system...", isMobile ? "(mobile mode)" : "(desktop mode)");
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (intervalRef.current) {
            console.log('üîÑ Clearing existing interval');
            clearInterval(intervalRef.current);
            intervalRef.current = null;
        }

        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –∏–∫–æ–Ω–∫—É
        try {
            const firstIcon = createIcon();
            console.log('üëÜ Setting first icon:', firstIcon);
            setActiveIcons([firstIcon]);
        } catch (error) {
            console.error('‚ùå Error creating first icon:', error);
            return;
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        const config = isMobile ? ANIMATION_CONFIG_MOBILE : ANIMATION_CONFIG;
        console.log('‚è≤Ô∏è Setting interval with config:', config);

        intervalRef.current = setInterval(() => {
            console.log('‚è∞ Interval tick - creating new icon');
            setActiveIcons(prev => {
                // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫
                if (isMobile && 'maxActiveIcons' in config && prev.length >= config.maxActiveIcons) {
                    console.log('üö´ Max mobile icons reached:', prev.length);
                    return prev;
                }
                
                try {
                    const newIcon = createIcon();
                    console.log('‚ûï Adding icon to array, total will be:', prev.length + 1);
                    return [...prev, newIcon];
                } catch (error) {
                    console.error('‚ùå Error creating icon in interval:', error);
                    return prev;
                }
            });
        }, config.intervalMs);

        console.log('‚úÖ Animation system started successfully');

        return () => {
            console.log('üßπ Cleanup: clearing interval');
            if (intervalRef.current) {
                clearInterval(intervalRef.current);
                intervalRef.current = null;
            }
        };
    }, [isReducedMotion, isMobile, createIcon]); // –£–ø—Ä–æ—Å—Ç–∏–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

    return {
        activeIcons: isReducedMotion ? [] : activeIcons,
        removeIcon,
        isMobile,
    };
}; 